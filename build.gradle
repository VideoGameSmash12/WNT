plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

group 'me.videogamesm12'
version '2.0-indev'

repositories {
}

dependencies {
    minecraft "com.mojang:minecraft:1.17.1"
    mappings "net.fabricmc:yarn:1.17.1+build.65:v2"

    modImplementation "net.fabricmc.fabric-api:fabric-api:0.46.0+1.17"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    subprojects.each {
        include project("${it.name}:")
    }
}

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    tasks.withType(JavaCompile).configureEach {
        it.options.release.set(16)
    }

    repositories {
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            url "https://maven.terraformersmc.com/releases/"
        }
    }

    dependencies {
        modImplementation "net.fabricmc:fabric-loader:0.12.12"
        modApi("me.shedaniel.cloth:cloth-config-fabric:5.3.58") {
            exclude(group: "net.fabricmc.fabric-api")
        }
        modImplementation "com.terraformersmc:modmenu:2.0.14"

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    processResources {
        inputs.property "version", rootProject.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": rootProject.version
        }
    }

    // Handles publishing
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }

        // Don't publish anywhere.
        repositories {}
    }

}

subprojects {
    version rootProject.version

    dependencies {
        implementation rootProject
    }
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}